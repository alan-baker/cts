{"version":3,"sources":["../../../../src/common/framework/logging/test_case_recorder.ts"],"names":["SkipTestCase","now","assert","LogMessageWithStack","LogSeverity","kMaxLogStacks","TestCaseRecorder","maxLogSeverity","Pass","startTime","logs","logLinesAtCurrentSeverity","debugging","messagesForPreviouslySeenStacks","Map","constructor","result","start","finish","timeMilliseconds","timems","Math","ceil","status","Skip","Warn","injectResult","injectedResult","Object","assign","debug","ex","logMessage","setStackHidden","logImpl","info","skipped","message","warn","expectationFailed","ExpectFailed","validationFailed","ValidationFailed","threw","ThrewException","level","stack","seen","get","incrementTimesSeen","set","log","push"],"mappings":"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","sourcesContent":["import { SkipTestCase } from '../fixture.js';\nimport { now, assert } from '../util/util.js';\n\nimport { LogMessageWithStack } from './log_message.js';\nimport { LiveTestCaseResult } from './result.js';\n\nenum LogSeverity {\n  Pass = 0,\n  Skip = 1,\n  Warn = 2,\n  ExpectFailed = 3,\n  ValidationFailed = 4,\n  ThrewException = 5,\n}\n\nconst kMaxLogStacks = 2;\n\n/** Holds onto a LiveTestCaseResult owned by the Logger, and writes the results into it. */\nexport class TestCaseRecorder {\n  private result: LiveTestCaseResult;\n  private maxLogSeverity = LogSeverity.Pass;\n  private startTime = -1;\n  private logs: LogMessageWithStack[] = [];\n  private logLinesAtCurrentSeverity = 0;\n  private debugging = false;\n  /** Used to dedup log messages which have identical stacks. */\n  private messagesForPreviouslySeenStacks = new Map<string, LogMessageWithStack>();\n\n  constructor(result: LiveTestCaseResult, debugging: boolean) {\n    this.result = result;\n    this.debugging = debugging;\n  }\n\n  start(): void {\n    assert(this.startTime < 0, 'TestCaseRecorder cannot be reused');\n    this.startTime = now();\n  }\n\n  finish(): void {\n    assert(this.startTime >= 0, 'finish() before start()');\n\n    const timeMilliseconds = now() - this.startTime;\n    // Round to next microsecond to avoid storing useless .xxxx00000000000002 in results.\n    this.result.timems = Math.ceil(timeMilliseconds * 1000) / 1000;\n\n    // Convert numeric enum back to string (but expose 'exception' as 'fail')\n    this.result.status =\n      this.maxLogSeverity === LogSeverity.Pass\n        ? 'pass'\n        : this.maxLogSeverity === LogSeverity.Skip\n        ? 'skip'\n        : this.maxLogSeverity === LogSeverity.Warn\n        ? 'warn'\n        : 'fail'; // Everything else is an error\n\n    this.result.logs = this.logs;\n  }\n\n  injectResult(injectedResult: LiveTestCaseResult): void {\n    Object.assign(this.result, injectedResult);\n  }\n\n  debug(ex: Error): void {\n    if (!this.debugging) {\n      return;\n    }\n    const logMessage = new LogMessageWithStack('DEBUG', ex);\n    logMessage.setStackHidden();\n    this.logImpl(LogSeverity.Pass, logMessage);\n  }\n\n  info(ex: Error): void {\n    const logMessage = new LogMessageWithStack('INFO', ex);\n    logMessage.setStackHidden();\n    this.logImpl(LogSeverity.Pass, logMessage);\n  }\n\n  skipped(ex: SkipTestCase): void {\n    const message = new LogMessageWithStack('SKIP', ex);\n    if (!this.debugging) {\n      message.setStackHidden();\n    }\n    this.logImpl(LogSeverity.Skip, message);\n  }\n\n  warn(ex: Error): void {\n    this.logImpl(LogSeverity.Warn, new LogMessageWithStack('WARN', ex));\n  }\n\n  expectationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ExpectFailed, new LogMessageWithStack('EXPECTATION FAILED', ex));\n  }\n\n  validationFailed(ex: Error): void {\n    this.logImpl(LogSeverity.ValidationFailed, new LogMessageWithStack('VALIDATION FAILED', ex));\n  }\n\n  threw(ex: Error): void {\n    if (ex instanceof SkipTestCase) {\n      this.skipped(ex);\n      return;\n    }\n    this.logImpl(LogSeverity.ThrewException, new LogMessageWithStack('EXCEPTION', ex));\n  }\n\n  private logImpl(level: LogSeverity, logMessage: LogMessageWithStack): void {\n    // Deduplicate errors with the exact same stack\n    if (logMessage.stack) {\n      const seen = this.messagesForPreviouslySeenStacks.get(logMessage.stack);\n      if (seen) {\n        seen.incrementTimesSeen();\n        return;\n      }\n      this.messagesForPreviouslySeenStacks.set(logMessage.stack, logMessage);\n    }\n\n    // Mark printStack=false for all logs except 2 at the highest severity\n    if (level > this.maxLogSeverity) {\n      this.logLinesAtCurrentSeverity = 0;\n      this.maxLogSeverity = level;\n      if (!this.debugging) {\n        // Go back and turn off printStack for everything of a lower log level\n        for (const log of this.logs) {\n          log.setStackHidden();\n        }\n      }\n    }\n    if (level < this.maxLogSeverity || this.logLinesAtCurrentSeverity >= kMaxLogStacks) {\n      if (!this.debugging) {\n        logMessage.setStackHidden();\n      }\n    }\n    this.logs.push(logMessage);\n    this.logLinesAtCurrentSeverity++;\n  }\n}\n"],"file":"test_case_recorder.js"}