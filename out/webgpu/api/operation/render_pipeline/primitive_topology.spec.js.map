{"version":3,"sources":["../../../../../src/webgpu/api/operation/render_pipeline/primitive_topology.spec.ts"],"names":["description","params","pbool","poptions","makeTestGroup","GPUTest","kRTSize","kColorFormat","kValidPixelColor","Uint8Array","kInvalidPixelColor","Point2D","constructor","x","y","z","w","toNDC","getMidpoint","a","b","getCentroid","c","VertexLocations","getPointTestLocations","expectedColor","testLocations","location","push","color","getLineTestLocations","getPrimitiveRestartLineTestLocations","getLineStripTestLocations","getTriangleListTestLocations","getTriangleStripTestLocations","generateVertexBuffer","vertexLocations","vertexCoords","Float32Array","length","i","point","PrimitiveTopologyTest","makeAttachmentTexture","device","createTexture","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","run","topology","usePrimitiveRestart","colorAttachment","encoder","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","attachment","createView","loadValue","r","g","stripIndexFormat","undefined","setPipeline","createRenderPipeline","vertex","module","createShaderModule","code","entryPoint","buffers","arrayStride","BYTES_PER_ELEMENT","attributes","offset","shaderLocation","fragment","targets","primitive","vertexBuffer","makeBufferWithContents","GPUBufferUsage","VERTEX","setVertexBuffer","indexBuffer","Uint32Array","INDEX","setIndexBuffer","drawIndexed","draw","endPass","queue","submit","finish","testPixel","expectSinglePixelIn2DTexture","exp","topologies","test","desc","cases","combine","unless","p","primitive_restart","fn","t"],"mappings":"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","sourcesContent":["export const description = `Test primitive topology rendering.\n\nDraw a primitive using 6 vertices with each topology and check if the pixel is covered.\n\nVertex sequence and coordinates are the same for each topology:\n  - Vertex buffer = [v1, v2, v3, v4, v5, v6]\n  - Topology = [point-list, line-list, line-strip, triangle-list, triangle-strip]\n\nTest locations are framebuffer coordinates:\n  - Pixel value { valid: green, invalid: black, format: 'rgba8unorm'}\n  - Test point is valid if the pixel value equals the covered pixel value at the test location.\n  - Primitive restart occurs for strips (line-strip and triangle-strip) between [v3, v4].\n\n  Topology: point-list         Valid test location(s)           Invalid test location(s)\n\n       v2    v4     v6         Every vertex.                    Line-strip locations.\n                                                                Triangle-list locations.\n                                                                Triangle-strip locations.\n\n   v1     v3     v5\n\n  Topology: line-list (3 lines)\n\n       v2    v4     v6         Center of three line segments:   Line-strip locations.\n      *      *      *          {v1,V2}, {v3,v4}, and {v4,v5}.   Triangle-list locations.\n     *      *      *                                            Triangle-strip locations.\n    *      *      *\n   v1     v3     v5\n\n  Topology: line-strip (5 lines)\n\n       v2    v4     v6\n       **    **     *\n      *  *  *  *   *           Line-list locations              Triangle-list locations.\n     *    **     **          + Center of two line segments:     Triangle-strip locations.\n    v1    v3     v5            {v2,v3} and {v4,v5}.\n                                                                With primitive restart:\n                                                                Line segment {v3, v4}.\n\n  Topology: triangle-list (2 triangles)\n\n      v2       v4    v6\n      **        ******         Center of two triangle(s):       Triangle-strip locations.\n     ****        ****          {v1,v2,v3} and {v4,v5,v6}.\n    ******        **\n   v1     v3      v5\n\n  Topology: triangle-strip (4 triangles)\n\n      v2        v4      v6\n      ** ****** ** ******      Triangle-list locations          None.\n     **** **** **** ****     + Center of two triangle(s):\n    ****** ** ****** **        {v2,v3,v4} and {v3,v4,v5}.       With primitive restart:\n   v1       v3        v5                                        Triangle {v2, v3, v4}\n                                                                and {v3, v4, v5}.\n`;\n\nimport { params, pbool, poptions } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nconst kRTSize: number = 56;\nconst kColorFormat = 'rgba8unorm';\nconst kValidPixelColor = new Uint8Array([0x00, 0xff, 0x00, 0xff]); // green\nconst kInvalidPixelColor = new Uint8Array([0x00, 0x00, 0x00, 0x00]); // black\n\nclass Point2D {\n  x: number;\n  y: number;\n  z: number;\n  w: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n    this.z = 0;\n    this.w = 1;\n  }\n\n  toNDC(): Point2D {\n    // NDC coordinate space is y-up, so we negate the y mapping.\n    // To ensure the resulting vertex in NDC will be placed at the center of the pixel, we\n    // must offset by the pixel coordinates or 0.5.\n    return new Point2D((2 * (this.x + 0.5)) / kRTSize - 1, (-2 * (this.y + 0.5)) / kRTSize + 1);\n  }\n\n  static getMidpoint(a: Point2D, b: Point2D) {\n    return new Point2D((a.x + b.x) / 2, (a.y + b.y) / 2);\n  }\n\n  static getCentroid(a: Point2D, b: Point2D, c: Point2D) {\n    return new Point2D((a.x + b.x + c.x) / 3, (a.y + b.y + c.y) / 3);\n  }\n}\n\ninterface TestLocation {\n  location: Point2D;\n  color: Uint8Array;\n}\n\nconst VertexLocations = [\n  new Point2D(8, 24), // v1\n  new Point2D(16, 8), // v2\n  new Point2D(24, 24), // v3\n  new Point2D(32, 8), // v4\n  new Point2D(40, 24), // v5\n  new Point2D(48, 8), // v6\n];\n\nfunction getPointTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Test points are always equal to vertex locations.\n  const testLocations: TestLocation[] = [];\n  for (const location of VertexLocations) {\n    testLocations.push({ location, color: expectedColor });\n  }\n  return testLocations;\n}\n\nfunction getLineTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 3 line segments\n  return [\n    {\n      // Line {v1, v2}\n      location: Point2D.getMidpoint(VertexLocations[0], VertexLocations[1]),\n      color: expectedColor,\n    },\n    {\n      // Line {v3, v4}\n      location: Point2D.getMidpoint(VertexLocations[2], VertexLocations[3]),\n      color: expectedColor,\n    },\n    {\n      // Line {v5, v6}\n      location: Point2D.getMidpoint(VertexLocations[4], VertexLocations[5]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getPrimitiveRestartLineTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 2 line segments\n  return [\n    {\n      // Line {v1, v2}\n      location: Point2D.getMidpoint(VertexLocations[0], VertexLocations[1]),\n      color: expectedColor,\n    },\n    {\n      // Line {v5, v6}\n      location: Point2D.getMidpoint(VertexLocations[4], VertexLocations[5]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getLineStripTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Midpoints of 2 line segments\n  return [\n    {\n      // Line {v2, v3}\n      location: Point2D.getMidpoint(VertexLocations[1], VertexLocations[2]),\n      color: expectedColor,\n    },\n    {\n      // Line {v4, v5}\n      location: Point2D.getMidpoint(VertexLocations[3], VertexLocations[4]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getTriangleListTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Center of two triangles\n  return [\n    {\n      // Triangle {v1, v2, v3}\n      location: Point2D.getCentroid(VertexLocations[0], VertexLocations[1], VertexLocations[2]),\n      color: expectedColor,\n    },\n    {\n      // Triangle {v4, v5, v6}\n      location: Point2D.getCentroid(VertexLocations[3], VertexLocations[4], VertexLocations[5]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction getTriangleStripTestLocations(expectedColor: Uint8Array): TestLocation[] {\n  // Center of two triangles\n  return [\n    {\n      // Triangle {v2, v3, v4}\n      location: Point2D.getCentroid(VertexLocations[1], VertexLocations[2], VertexLocations[3]),\n      color: expectedColor,\n    },\n    {\n      // Triangle {v3, v4, v5}\n      location: Point2D.getCentroid(VertexLocations[2], VertexLocations[3], VertexLocations[4]),\n      color: expectedColor,\n    },\n  ];\n}\n\nfunction generateVertexBuffer(vertexLocations: Point2D[]): Float32Array {\n  const vertexCoords = new Float32Array(vertexLocations.length * 4);\n  for (let i = 0; i < vertexLocations.length; i++) {\n    const point = vertexLocations[i].toNDC();\n    vertexCoords[i * 4 + 0] = point.x;\n    vertexCoords[i * 4 + 1] = point.y;\n    vertexCoords[i * 4 + 2] = point.z;\n    vertexCoords[i * 4 + 3] = point.w;\n  }\n  return vertexCoords;\n}\n\nclass PrimitiveTopologyTest extends GPUTest {\n  makeAttachmentTexture(): GPUTexture {\n    return this.device.createTexture({\n      format: kColorFormat,\n      size: { width: kRTSize, height: kRTSize, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    });\n  }\n\n  run(\n    topology: GPUPrimitiveTopology,\n    testLocations: TestLocation[],\n    usePrimitiveRestart: boolean\n  ): void {\n    const colorAttachment = this.makeAttachmentTexture();\n\n    // Color load operator will clear color attachment to zero.\n    const encoder = this.device.createCommandEncoder();\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n        {\n          attachment: colorAttachment.createView(),\n          loadValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n        },\n      ],\n    });\n\n    let stripIndexFormat = undefined;\n    if (topology === 'triangle-strip' || topology === 'line-strip') {\n      stripIndexFormat = 'uint32' as const;\n    }\n\n    // Draw a primitive using 6 vertices based on the type.\n    // Pixels are generated based on vertex position.\n    // If point, 1 pixel is generated at each vertex location.\n    // Otherwise, >1 pixels could be generated.\n    // Output color is solid green.\n    renderPass.setPipeline(\n      this.device.createRenderPipeline({\n        vertex: {\n          module: this.device.createShaderModule({\n            code: `\n              [[location(0)]] var<in> pos : vec4<f32>;\n              [[builtin(position)]] var<out> Position : vec4<f32>;\n\n              [[stage(vertex)]] fn main() -> void {\n                Position = pos;\n                return;\n              }`,\n          }),\n          entryPoint: 'main',\n          buffers: [\n            {\n              arrayStride: 4 * Float32Array.BYTES_PER_ELEMENT,\n              attributes: [\n                {\n                  format: 'float32x4',\n                  offset: 0,\n                  shaderLocation: 0,\n                },\n              ],\n            },\n          ],\n        },\n        fragment: {\n          module: this.device.createShaderModule({\n            code: `\n              [[location(0)]] var<out> fragColor : vec4<f32>;\n              [[stage(fragment)]] fn main() -> void {\n                fragColor = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n                return;\n              }`,\n          }),\n          entryPoint: 'main',\n          targets: [{ format: kColorFormat }],\n        },\n        primitive: {\n          topology,\n          stripIndexFormat,\n        },\n      })\n    );\n\n    // Create vertices for the primitive in a vertex buffer and bind it.\n    const vertexCoords = generateVertexBuffer(VertexLocations);\n    const vertexBuffer = this.makeBufferWithContents(vertexCoords, GPUBufferUsage.VERTEX);\n    renderPass.setVertexBuffer(0, vertexBuffer);\n\n    // Restart the strip between [v3, <restart>, v4].\n    if (usePrimitiveRestart) {\n      const indexBuffer = this.makeBufferWithContents(\n        new Uint32Array([0, 1, 2, -1, 3, 4, 5]),\n        GPUBufferUsage.INDEX\n      );\n      renderPass.setIndexBuffer(indexBuffer, 'uint32');\n      renderPass.drawIndexed(7); // extra index for restart\n    } else {\n      renderPass.draw(6);\n    }\n\n    renderPass.endPass();\n\n    this.device.queue.submit([encoder.finish()]);\n\n    for (const testPixel of testLocations) {\n      this.expectSinglePixelIn2DTexture(\n        colorAttachment,\n        kColorFormat,\n        { x: testPixel.location.x, y: testPixel.location.y },\n        { exp: testPixel.color }\n      );\n    }\n  }\n}\n\nexport const g = makeTestGroup(PrimitiveTopologyTest);\n\nconst topologies: GPUPrimitiveTopology[] = [\n  'point-list',\n  'line-list',\n  'line-strip',\n  'triangle-list',\n  'triangle-strip',\n];\n\ng.test('basic')\n  .desc(\n    `Compute test locations for valid and invalid pixels for each topology.\n  If the primitive covers the pixel, the color value will be |kValidPixelColor|.\n  Otherwise, a non-covered pixel will be |kInvalidPixelColor|.\n\n  Params:\n    - topology= {...all topologies}\n    - primitive_restart= { true, false } - always false for non-strip topologies\n  `\n  )\n  .cases(\n    params() //\n      .combine(poptions('topology', topologies))\n      .combine(pbool('primitive_restart'))\n      .unless(\n        p => p.primitive_restart && p.topology !== 'line-strip' && p.topology !== 'triangle-strip'\n      )\n  )\n  .fn(t => {\n    // Check valid test locations\n    let testLocations: TestLocation[];\n    switch (t.params.topology) {\n      case 'point-list':\n        testLocations = [\n          ...getPointTestLocations(kValidPixelColor),\n          ...getLineStripTestLocations(kInvalidPixelColor),\n          ...getTriangleListTestLocations(kInvalidPixelColor),\n          ...getTriangleStripTestLocations(kInvalidPixelColor),\n        ];\n        break;\n      case 'line-list':\n        testLocations = [\n          ...getLineTestLocations(kValidPixelColor),\n          ...getLineStripTestLocations(kInvalidPixelColor),\n          ...getTriangleListTestLocations(kInvalidPixelColor),\n          ...getTriangleStripTestLocations(kInvalidPixelColor),\n        ];\n        break;\n      case 'line-strip':\n        testLocations = [\n          ...(t.params.primitive_restart\n            ? getPrimitiveRestartLineTestLocations(kValidPixelColor)\n            : getLineTestLocations(kValidPixelColor)),\n          ...getLineStripTestLocations(kValidPixelColor),\n          ...getTriangleListTestLocations(kInvalidPixelColor),\n          ...getTriangleStripTestLocations(kInvalidPixelColor),\n        ];\n        break;\n      case 'triangle-list':\n        testLocations = [\n          ...getTriangleListTestLocations(kValidPixelColor),\n          ...getTriangleStripTestLocations(kInvalidPixelColor),\n        ];\n        break;\n      case 'triangle-strip':\n        testLocations = [\n          ...getTriangleListTestLocations(kValidPixelColor),\n          ...getTriangleStripTestLocations(\n            t.params.primitive_restart ? kInvalidPixelColor : kValidPixelColor\n          ),\n        ];\n        break;\n    }\n\n    t.run(t.params.topology, testLocations, t.params.primitive_restart);\n  });\n"],"file":"primitive_topology.spec.js"}