{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","assert","kSizedTextureFormatInfo","kRegularTextureFormats","GPUTest","align","physicalMipSize","F","GetInitialDataPerMipLevel","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","byteSize","depth","initialData","Uint8Array","ArrayBuffer","i","g","test","desc","combine","srcTextureSize","dstTextureSize","srcOffset","x","y","z","dstOffset","copyExtent","fn","t","copyBoxOffsets","srcCopyLevel","dstCopyLevel","kMipLevelCount","srcTextureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","mipLevelCount","srcTexture","device","createTexture","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","defaultQueue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","appliedCopyWidth","max","minHeight","appliedCopyHeight","appliedCopyDepth","encoder","createCommandEncoder","copyTextureToTexture","origin","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","submit","finish","expectedDataWithPadding","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","set","slice","expectContents"],"mappings":"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","sourcesContent":["export const description = 'copyTexturetoTexture operation tests';\n\nimport { poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/framework/util/util.js';\nimport {\n  kSizedTextureFormatInfo,\n  kRegularTextureFormats,\n  SizedTextureFormat,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/subresource.js';\n\nclass F extends GPUTest {\n  GetInitialDataPerMipLevel(\n    textureSize: GPUExtent3DDict,\n    format: SizedTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    // TODO(jiawei.shao@intel.com): support 3D textures\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const bytesPerBlock = kSizedTextureFormatInfo[format].bytesPerBlock;\n    const blockWidthInTexel = kSizedTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kSizedTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depth;\n    const initialData = new Uint8Array(new ArrayBuffer(byteSize));\n\n    for (let i = 0; i < byteSize; ++i) {\n      initialData[i] = (i ** 3 + i) % 251;\n    }\n    return initialData;\n  }\n}\n\nexport const g = makeTestGroup(F);\n\n// TODO(jiawei.shao@intel.com): support all WebGPU texture formats\ng.test('t2t_non_compressed_color_formats')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any non-compressed color format that is\n  supported by WebGPU, doing CopyTextureToTexture() copy, and verifying the content of the whole dstTexture\n\n    copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero valid\n    srcOffset that\n    - covers the whole dstTexture subresource\n    - covers the corners of the dstTexture\n    - doesn't cover any texels that are on the edge of the dstTexture\n    - covers the mipmap level > 0\n    - covers {one, multiple} 2D texture array slices\n  `\n  )\n  .params(\n    params()\n      .combine(\n        poptions('textureSize', [\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 1 },\n            dstTextureSize: { width: 32, height: 32, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depth: 1 },\n            dstTextureSize: { width: 31, height: 33, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 1 },\n            dstTextureSize: { width: 64, height: 64, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 1 },\n            dstTextureSize: { width: 63, height: 61, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 3 },\n            dstTextureSize: { width: 32, height: 32, depth: 3 },\n          },\n        ])\n      )\n      .combine(poptions('format', kRegularTextureFormats))\n      .combine(\n        poptions('copyBoxOffsets', [\n          // Copy the whole array slices from the source texture to the destination texture.\n          // The copy extent will cover the whole subresource of either source or the\n          // destination texture.\n          // From (0, 0) of src to (0, 0) of dst.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n          // From (0, 0) of src to (1, 0) of dst.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 1, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n          // From (0, 0) of src to (0, 1) of dst.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 1, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n          // From (1, 0) of src to (0, 0) of dst.\n          {\n            srcOffset: { x: 1, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n          // From (0, 1) of src to (0, 0) of dst.\n          {\n            srcOffset: { x: 0, y: 1, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n\n          // Copy the whole array slices from the source texture to the destination texture.\n          // From (1, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n          // column of both source and destination texture.\n          {\n            srcOffset: { x: 1, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: -1, height: 0, depth: 0 },\n          },\n          // From (0, 1) of src to (0, 0) of dst, and the copy extent will not cover the last\n          // row of both source and destination texture.\n          {\n            srcOffset: { x: 0, y: 1, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: -1, depth: 0 },\n          },\n\n          // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n          // destination texture or copy nothing when they are not 2D array textures.\n          {\n            srcOffset: { x: 0, y: 0, z: 1 },\n            dstOffset: { x: 0, y: 0, z: 1 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n          // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n          // destination texture or copy nothing when they are not 2D array textures.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 1 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n          // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n          // destination texture or copy nothing when they are not 2D array textures.\n          {\n            srcOffset: { x: 0, y: 0, z: 1 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n          // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n          // destination texture or copy nothing when they are not 2D array textures.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n          // Copy 2 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n          // destination texture or copy nothing when they are not 2D array textures.\n          {\n            srcOffset: { x: 0, y: 0, z: 1 },\n            dstOffset: { x: 0, y: 0, z: 1 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 3]))\n      .combine(poptions('dstCopyLevel', [0, 3]))\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const kMipLevelCount = 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      size: textureSize.srcTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const srcTexture = t.device.createTexture(srcTextureDesc);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      size: textureSize.dstTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const dstTexture = t.device.createTexture(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = t.GetInitialDataPerMipLevel(\n      textureSize.srcTextureSize,\n      format,\n      srcCopyLevel\n    );\n    const srcTextureSizeAtLevel = physicalMipSize(\n      textureSize.srcTextureSize,\n      format,\n      '2d',\n      srcCopyLevel\n    );\n    const bytesPerBlock = kSizedTextureFormatInfo[format].bytesPerBlock;\n    const blockWidth = kSizedTextureFormatInfo[format].blockWidth;\n    const blockHeight = kSizedTextureFormatInfo[format].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    t.device.defaultQueue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(\n      textureSize.dstTextureSize,\n      format,\n      '2d',\n      dstCopyLevel\n    );\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const appliedCopyWidth =\n      minWidth +\n      copyBoxOffsets.copyExtent.width -\n      Math.max(copyBoxOffsets.srcOffset.x, copyBoxOffsets.dstOffset.x);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n    const appliedCopyHeight =\n      minHeight +\n      copyBoxOffsets.copyExtent.height -\n      Math.max(copyBoxOffsets.srcOffset.y, copyBoxOffsets.dstOffset.y);\n    const appliedCopyDepth = Math.max(\n      textureSize.srcTextureSize.depth +\n        copyBoxOffsets.copyExtent.depth -\n        Math.max(copyBoxOffsets.srcOffset.z, copyBoxOffsets.dstOffset.z),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const encoder = t.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel, origin: copyBoxOffsets.srcOffset },\n      { texture: dstTexture, mipLevel: dstCopyLevel, origin: copyBoxOffsets.dstOffset },\n      { width: appliedCopyWidth, height: appliedCopyHeight, depth: appliedCopyDepth }\n    );\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlocksPerRow * dstBlockRowsPerImage - 1) * bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = t.device.createBuffer(dstBufferDesc);\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      {\n        buffer: dstBuffer,\n        bytesPerRow: bytesPerDstAlignedBlockRow,\n        rowsPerImage: dstTextureSizeAtLevel.height,\n      },\n      dstTextureSizeAtLevel\n    );\n    t.device.defaultQueue.submit([encoder.finish()]);\n\n    // Fill expectedDataWithPadding with the expected data of dstTexture. The other values in\n    // expectedDataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedDataWithPadding = new ArrayBuffer(dstBufferSize);\n    const expectedUint8DataWithPadding = new Uint8Array(expectedDataWithPadding);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: copyBoxOffsets.srcOffset.x / blockWidth,\n      y: copyBoxOffsets.srcOffset.y / blockHeight,\n      z: copyBoxOffsets.srcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: copyBoxOffsets.dstOffset.x / blockWidth,\n      y: copyBoxOffsets.dstOffset.y / blockHeight,\n      z: copyBoxOffsets.dstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        expectedUint8DataWithPadding.set(\n          expectedUint8Data.slice(\n            expectedDataOffset,\n            expectedDataOffset + appliedCopyBlocksPerRow * bytesPerBlock\n          ),\n          expectedDataWithPaddingOffset\n        );\n      }\n    }\n\n    // Verify the content of the whole subresouce of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    t.expectContents(dstBuffer, expectedUint8DataWithPadding);\n  });\n"],"file":"copyTextureToTexture.spec.js"}