{"version":3,"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"names":["description","poptions","params","makeTestGroup","assert","kSizedTextureFormatInfo","kRegularTextureFormats","GPUTest","align","physicalMipSize","F","GetInitialDataPerMipLevel","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","byteSize","depth","initialData","Uint8Array","ArrayBuffer","i","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","copyBoxOffsets","srcCopyLevel","dstCopyLevel","kMipLevelCount","srcTextureDesc","size","usage","GPUTextureUsage","COPY_SRC","COPY_DST","mipLevelCount","srcTexture","device","createTexture","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","defaultQueue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","encoder","createCommandEncoder","copyTextureToTexture","origin","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","dstBufferDesc","GPUBufferUsage","dstBuffer","createBuffer","copyTextureToBuffer","buffer","submit","finish","expectedDataWithPadding","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","set","slice","expectContents","kCopyBoxOffsetsForWholeDepth","g","test","desc","combine","fn","t","copyBoxOffset"],"mappings":"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","sourcesContent":["export const description = `copyTexturetoTexture operation tests\n\n  TODO(jiawei.shao@intel.com): support all WebGPU texture formats.\n  `;\n\nimport { poptions, params } from '../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/framework/util/util.js';\nimport {\n  kSizedTextureFormatInfo,\n  kRegularTextureFormats,\n  SizedTextureFormat,\n} from '../../../capability_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/subresource.js';\n\nclass F extends GPUTest {\n  GetInitialDataPerMipLevel(\n    textureSize: GPUExtent3DDict,\n    format: SizedTextureFormat,\n    mipLevel: number\n  ): Uint8Array {\n    // TODO(jiawei.shao@intel.com): support 3D textures\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const bytesPerBlock = kSizedTextureFormatInfo[format].bytesPerBlock;\n    const blockWidthInTexel = kSizedTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kSizedTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n      (textureSizeAtLevel.width / blockWidthInTexel) *\n      (textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depth;\n    const initialData = new Uint8Array(new ArrayBuffer(byteSize));\n\n    for (let i = 0; i < byteSize; ++i) {\n      initialData[i] = (i ** 3 + i) % 251;\n    }\n    return initialData;\n  }\n\n  DoCopyTextureToTextureTest(\n    srcTextureSize: GPUExtent3DDict,\n    dstTextureSize: GPUExtent3DDict,\n    format: SizedTextureFormat,\n    copyBoxOffsets: {\n      srcOffset: { x: number; y: number; z: number };\n      dstOffset: { x: number; y: number; z: number };\n      copyExtent: GPUExtent3DDict;\n    },\n    srcCopyLevel: number,\n    dstCopyLevel: number\n  ): void {\n    const kMipLevelCount = 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc: GPUTextureDescriptor = {\n      size: srcTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const srcTexture = this.device.createTexture(srcTextureDesc);\n    const dstTextureDesc: GPUTextureDescriptor = {\n      size: dstTextureSize,\n      format,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount: kMipLevelCount,\n    };\n    const dstTexture = this.device.createTexture(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n    const srcTextureSizeAtLevel = physicalMipSize(srcTextureSize, format, '2d', srcCopyLevel);\n    const bytesPerBlock = kSizedTextureFormatInfo[format].bytesPerBlock;\n    const blockWidth = kSizedTextureFormatInfo[format].blockWidth;\n    const blockHeight = kSizedTextureFormatInfo[format].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.defaultQueue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage,\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(dstTextureSize, format, '2d', dstCopyLevel);\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y, minHeight),\n      z: copyBoxOffsets.srcOffset.z,\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y, minHeight),\n      z: copyBoxOffsets.dstOffset.z,\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth + copyBoxOffsets.copyExtent.width - Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n        copyBoxOffsets.copyExtent.height -\n        Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth =\n      srcTextureSize.depth +\n      copyBoxOffsets.copyExtent.depth -\n      Math.max(appliedSrcOffset.z, appliedDstOffset.z);\n    assert(appliedCopyDepth >= 0);\n\n    const encoder = this.device.createCommandEncoder();\n    encoder.copyTextureToTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n      { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n      { width: appliedCopyWidth, height: appliedCopyHeight, depth: appliedCopyDepth }\n    );\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n      (dstBlocksPerRow * dstBlockRowsPerImage * dstTextureSizeAtLevel.depth - 1) *\n        bytesPerDstAlignedBlockRow +\n      align(dstBlocksPerRow * bytesPerBlock, 4);\n    const dstBufferDesc: GPUBufferDescriptor = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    };\n    const dstBuffer = this.device.createBuffer(dstBufferDesc);\n\n    encoder.copyTextureToBuffer(\n      { texture: dstTexture, mipLevel: dstCopyLevel },\n      {\n        buffer: dstBuffer,\n        bytesPerRow: bytesPerDstAlignedBlockRow,\n        rowsPerImage: dstTextureSizeAtLevel.height,\n      },\n      dstTextureSizeAtLevel\n    );\n    this.device.defaultQueue.submit([encoder.finish()]);\n\n    // Fill expectedDataWithPadding with the expected data of dstTexture. The other values in\n    // expectedDataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedDataWithPadding = new ArrayBuffer(dstBufferSize);\n    const expectedUint8DataWithPadding = new Uint8Array(expectedDataWithPadding);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z,\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z,\n    };\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n          bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n          dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n          bytesPerBlock *\n            srcBlocksPerRow *\n            (srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n          srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        expectedUint8DataWithPadding.set(\n          expectedUint8Data.slice(\n            expectedDataOffset,\n            expectedDataOffset + appliedCopyBlocksPerRow * bytesPerBlock\n          ),\n          expectedDataWithPaddingOffset\n        );\n      }\n    }\n\n    // Verify the content of the whole subresouce of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    this.expectContents(dstBuffer, expectedUint8DataWithPadding);\n  }\n\n  static kCopyBoxOffsetsForWholeDepth = [\n    // From (0, 0) of src to (0, 0) of dst.\n    {\n      srcOffset: { x: 0, y: 0, z: 0 },\n      dstOffset: { x: 0, y: 0, z: 0 },\n      copyExtent: { width: 0, height: 0, depth: 0 },\n    },\n    // From (0, 0) of src to (1, 0) of dst.\n    {\n      srcOffset: { x: 0, y: 0, z: 0 },\n      dstOffset: { x: 1, y: 0, z: 0 },\n      copyExtent: { width: 0, height: 0, depth: 0 },\n    },\n    // From (0, 0) of src to (0, 1) of dst.\n    {\n      srcOffset: { x: 0, y: 0, z: 0 },\n      dstOffset: { x: 0, y: 1, z: 0 },\n      copyExtent: { width: 0, height: 0, depth: 0 },\n    },\n    // From (1, 0) of src to (0, 0) of dst.\n    {\n      srcOffset: { x: 1, y: 0, z: 0 },\n      dstOffset: { x: 0, y: 0, z: 0 },\n      copyExtent: { width: 0, height: 0, depth: 0 },\n    },\n    // From (0, 1) of src to (0, 0) of dst.\n    {\n      srcOffset: { x: 0, y: 1, z: 0 },\n      dstOffset: { x: 0, y: 0, z: 0 },\n      copyExtent: { width: 0, height: 0, depth: 0 },\n    },\n    // From (1, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n    // column of both source and destination texture.\n    {\n      srcOffset: { x: 1, y: 0, z: 0 },\n      dstOffset: { x: 0, y: 0, z: 0 },\n      copyExtent: { width: -1, height: 0, depth: 0 },\n    },\n    // From (0, 1) of src to (0, 0) of dst, and the copy extent will not cover the last\n    // row of both source and destination texture.\n    {\n      srcOffset: { x: 0, y: 1, z: 0 },\n      dstOffset: { x: 0, y: 0, z: 0 },\n      copyExtent: { width: 0, height: -1, depth: 0 },\n    },\n  ];\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array')\n  .desc(\n    `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n  `\n  )\n  .params(\n    params()\n      .combine(\n        poptions('textureSize', [\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 1 },\n            dstTextureSize: { width: 32, height: 32, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depth: 1 },\n            dstTextureSize: { width: 31, height: 33, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 1 },\n            dstTextureSize: { width: 64, height: 64, depth: 1 },\n          },\n          {\n            srcTextureSize: { width: 32, height: 32, depth: 1 },\n            dstTextureSize: { width: 63, height: 61, depth: 1 },\n          },\n        ])\n      )\n      .combine(poptions('format', kRegularTextureFormats))\n      .combine(poptions('copyBoxOffsets', F.kCopyBoxOffsetsForWholeDepth))\n      .combine(poptions('srcCopyLevel', [0, 3]))\n      .combine(poptions('dstCopyLevel', [0, 3]))\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      format,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('color_textures,non_compressed,array')\n  .desc(\n    `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n  )\n  .params(\n    params()\n      .combine(\n        poptions('textureSize', [\n          {\n            srcTextureSize: { width: 64, height: 32, depth: 5 },\n            dstTextureSize: { width: 64, height: 32, depth: 5 },\n          },\n          {\n            srcTextureSize: { width: 31, height: 33, depth: 5 },\n            dstTextureSize: { width: 31, height: 33, depth: 5 },\n          },\n        ])\n      )\n      .combine(poptions('format', kRegularTextureFormats))\n      .combine(\n        poptions('copyBoxOffsets', [\n          // Copy the whole array slices from the source texture to the destination texture.\n          // The copy extent will cover the whole subresource of either source or the\n          // destination texture\n          ...F.kCopyBoxOffsetsForWholeDepth,\n\n          // Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n          // destination texture.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: -2 },\n          },\n          // Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n          // destination texture.\n          {\n            srcOffset: { x: 0, y: 0, z: 1 },\n            dstOffset: { x: 0, y: 0, z: 1 },\n            copyExtent: { width: 0, height: 0, depth: -3 },\n          },\n          // Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n          // destination texture.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 1 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n          // Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n          // destination texture.\n          {\n            srcOffset: { x: 0, y: 0, z: 1 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n          // Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n          // destination texture.\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: -3 },\n          },\n          // Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n          // destination texture.\n          {\n            srcOffset: { x: 0, y: 0, z: 1 },\n            dstOffset: { x: 0, y: 0, z: 1 },\n            copyExtent: { width: 0, height: 0, depth: -1 },\n          },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 3]))\n      .combine(poptions('dstCopyLevel', [0, 3]))\n  )\n  .fn(async t => {\n    const { textureSize, format, copyBoxOffsets, srcCopyLevel, dstCopyLevel } = t.params;\n\n    t.DoCopyTextureToTextureTest(\n      textureSize.srcTextureSize,\n      textureSize.dstTextureSize,\n      format,\n      copyBoxOffsets,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n\ng.test('zero_copies')\n  .desc(\n    `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n  )\n  .params(\n    params()\n      .combine(\n        poptions('copyBoxOffset', [\n          // copyExtent.width === 0\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: -64, height: 0, depth: 0 },\n          },\n          // copyExtent.width === 0 && srcOffset.x === textureWidth\n          {\n            srcOffset: { x: 64, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: -64, height: 0, depth: 0 },\n          },\n          // copyExtent.width === 0 && dstOffset.x === textureWidth\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 64, y: 0, z: 0 },\n            copyExtent: { width: -64, height: 0, depth: 0 },\n          },\n          // copyExtent.height === 0\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: -32, depth: 0 },\n          },\n          // copyExtent.height === 0 && srcOffset.y === textureHeight\n          {\n            srcOffset: { x: 0, y: 32, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: -32, depth: 0 },\n          },\n          // copyExtent.height === 0 && dstOffset.y === textureHeight\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 32, z: 0 },\n            copyExtent: { width: 0, height: -32, depth: 0 },\n          },\n          // copyExtent.depth === 0\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: -5 },\n          },\n          // copyExtent.depth === 0 && srcOffset.z === textureDepth\n          {\n            srcOffset: { x: 0, y: 0, z: 5 },\n            dstOffset: { x: 0, y: 0, z: 0 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n          // copyExtent.depth === 0 && dstOffset.z === textureDepth\n          {\n            srcOffset: { x: 0, y: 0, z: 0 },\n            dstOffset: { x: 0, y: 0, z: 5 },\n            copyExtent: { width: 0, height: 0, depth: 0 },\n          },\n        ])\n      )\n      .combine(poptions('srcCopyLevel', [0, 3]))\n      .combine(poptions('dstCopyLevel', [0, 3]))\n  )\n  .fn(async t => {\n    const { copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n    const format = 'rgba8unorm';\n    const textureSize = { width: 64, height: 32, depth: 5 };\n\n    t.DoCopyTextureToTextureTest(\n      textureSize,\n      textureSize,\n      format,\n      copyBoxOffset,\n      srcCopyLevel,\n      dstCopyLevel\n    );\n  });\n"],"file":"copyTextureToTexture.spec.js"}