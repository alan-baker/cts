{"version":3,"sources":["../../../../src/webgpu/util/texture/texelData.ts"],"names":["assert","unreachable","kEncodableTextureFormatInfo","kUncompressedTextureFormatInfo","assertInIntegerRange","float32ToFloatBits","floatAsNormalizedInteger","gammaCompress","encodeRGB9E5UFloat","normalizedIntegerAsFloat","gammaDecompress","TexelComponent","TexelWriteType","kR","R","kRG","G","kRGB","B","kRGBA","A","kBGRA","unorm","bitLength","n","value","type","Uint","snorm","Sint","uint","sint","decodeUnorm","decodeSnorm","identity","unorm2","decode","write","unorm8","unorm10","snorm8","uint8","uint16","uint32","sint8","sint16","sint32","float10","float11","float16","float32","Math","fround","Float","componentUnimplemented","repeatComponents","componentOrder","perComponentInfo","componentInfo","reduce","acc","curr","Object","assign","kRepresentationInfo","sRGB","Depth","Stencil","TexelDataRepresentationImpl","constructor","format","totalBitLength","writeTexelData","data","bitOffset","byteOffset","floor","byteLength","ceil","DataView","setFloat32","setInt8","setInt16","setInt32","setUint8","setUint16","setUint32","view","currentValue","getUint32","mask","bitsToClearRight","bitsToClearLeft","newValue","getComponentBitOffset","component","componentIndex","indexOf","slice","setComponent","setComponentBytes","dataType","getBytes","components","undefined","bytesPerBlock","length","buf","ArrayBuffer","c","componentValue","packData","values","info","kRepresentationCache","Map","getTexelDataRepresentation","has","set","get"],"mappings":"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","sourcesContent":["import { assert, unreachable } from '../../../common/framework/util/util.js';\nimport {\n  EncodableTextureFormat,\n  kEncodableTextureFormatInfo,\n  kUncompressedTextureFormatInfo,\n  UncompressedTextureFormat,\n} from '../../capability_info.js';\nimport {\n  assertInIntegerRange,\n  float32ToFloatBits,\n  floatAsNormalizedInteger,\n  gammaCompress,\n  encodeRGB9E5UFloat,\n  normalizedIntegerAsFloat,\n  gammaDecompress,\n} from '../conversion.js';\n\nexport const enum TexelComponent {\n  R = 'R',\n  G = 'G',\n  B = 'B',\n  A = 'A',\n  Depth = 'Depth',\n  Stencil = 'Stencil',\n}\n\nexport type PerTexelComponent<T> = { [c in TexelComponent]?: T };\n\nconst enum TexelWriteType {\n  Sint,\n  Uint,\n  Float,\n}\n\n// Function to convert a value into a texel value. It returns the converted value\n// and the type of the converted value. For example, conversion may convert:\n//  - floats to unsigned normalized integers\n//  - floats to half floats, interpreted as uint16 bits\ntype TexelWriteFn = (value: number) => { value: number; type: TexelWriteType };\n\n// Converts a data value to its representation in a shader\ntype DecodeFn = (value: number) => number;\n\ninterface SingleComponentInfo {\n  decode: DecodeFn;\n  write: TexelWriteFn;\n  bitLength: number;\n}\n\ntype TexelComponentInfo = PerTexelComponent<null | SingleComponentInfo>;\n\nconst kR = [TexelComponent.R];\nconst kRG = [TexelComponent.R, TexelComponent.G];\nconst kRGB = [TexelComponent.R, TexelComponent.G, TexelComponent.B];\nconst kRGBA = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\nconst kBGRA = [TexelComponent.B, TexelComponent.G, TexelComponent.R, TexelComponent.A];\n\nconst unorm = (bitLength: number) => (n: number) => ({\n  value: floatAsNormalizedInteger(n, bitLength, false),\n  type: TexelWriteType.Uint,\n});\n\nconst snorm = (bitLength: number) => (n: number) => ({\n  value: floatAsNormalizedInteger(n, bitLength, true),\n  type: TexelWriteType.Sint,\n});\n\nconst uint = (bitLength: number) => (n: number) => ({\n  value: (assertInIntegerRange(n, bitLength, false), n),\n  type: TexelWriteType.Uint,\n});\n\nconst sint = (bitLength: number) => (n: number) => ({\n  value: (assertInIntegerRange(n, bitLength, true), n),\n  type: TexelWriteType.Sint,\n});\n\nconst decodeUnorm = (bitLength: number) => (n: number) =>\n  normalizedIntegerAsFloat(n, bitLength, false);\nconst decodeSnorm = (bitLength: number) => (n: number) =>\n  normalizedIntegerAsFloat(n, bitLength, true);\nconst identity = (n: number) => n;\n\nconst unorm2 = { decode: decodeUnorm(2), write: unorm(2), bitLength: 2 };\nconst unorm8 = { decode: decodeUnorm(8), write: unorm(8), bitLength: 8 };\nconst unorm10 = { decode: decodeUnorm(10), write: unorm(10), bitLength: 10 };\n\nconst snorm8 = { decode: decodeSnorm(8), write: snorm(8), bitLength: 8 };\n\nconst uint8 = { decode: identity, write: uint(8), bitLength: 8 };\nconst uint16 = { decode: identity, write: uint(16), bitLength: 16 };\nconst uint32 = { decode: identity, write: uint(32), bitLength: 32 };\n\nconst sint8 = { decode: identity, write: sint(8), bitLength: 8 };\nconst sint16 = { decode: identity, write: sint(16), bitLength: 16 };\nconst sint32 = { decode: identity, write: sint(32), bitLength: 32 };\n\nconst float10 = {\n  decode: identity,\n  write: (n: number) => ({\n    value: float32ToFloatBits(n, 0, 5, 5, 15),\n    type: TexelWriteType.Uint,\n  }),\n  bitLength: 10,\n};\n\nconst float11 = {\n  decode: identity,\n  write: (n: number) => ({\n    value: float32ToFloatBits(n, 0, 5, 6, 15),\n    type: TexelWriteType.Uint,\n  }),\n  bitLength: 11,\n};\n\nconst float16 = {\n  decode: identity,\n  write: (n: number) => ({\n    value: float32ToFloatBits(n, 1, 5, 10, 15),\n    type: TexelWriteType.Uint,\n  }),\n  bitLength: 16,\n};\n\nconst float32 = {\n  decode: identity,\n  write: (n: number) => ({\n    value: Math.fround(n),\n    type: TexelWriteType.Float,\n  }),\n  bitLength: 32,\n};\n\nconst componentUnimplemented = {\n  decode: identity,\n  write: () => {\n    unreachable('TexelComponentInfo not implemented for this texture format');\n  },\n  bitLength: 0,\n};\n\nconst repeatComponents = (\n  componentOrder: TexelComponent[],\n  perComponentInfo: SingleComponentInfo\n) => {\n  const componentInfo = componentOrder.reduce((acc, curr) => {\n    return Object.assign(acc, {\n      [curr]: perComponentInfo,\n    });\n  }, {});\n\n  return {\n    componentOrder,\n    componentInfo,\n  };\n};\n\nconst kRepresentationInfo: {\n  // TODO: Figure out if/how to extend this to more texture formats\n  [k in UncompressedTextureFormat]: {\n    componentOrder: TexelComponent[];\n    componentInfo: TexelComponentInfo;\n    sRGB: boolean;\n    // Add fields as needed\n  };\n} = /* prettier-ignore */ {\n  'r8unorm':                { ...repeatComponents(   kR,  unorm8), sRGB: false },\n  'r8snorm':                { ...repeatComponents(   kR,  snorm8), sRGB: false },\n  'r8uint':                 { ...repeatComponents(   kR,   uint8), sRGB: false },\n  'r8sint':                 { ...repeatComponents(   kR,   sint8), sRGB: false },\n  'r16uint':                { ...repeatComponents(   kR,  uint16), sRGB: false },\n  'r16sint':                { ...repeatComponents(   kR,  sint16), sRGB: false },\n  'r16float':               { ...repeatComponents(   kR, float16), sRGB: false },\n  'rg8unorm':               { ...repeatComponents(  kRG,  unorm8), sRGB: false },\n  'rg8snorm':               { ...repeatComponents(  kRG,  snorm8), sRGB: false },\n  'rg8uint':                { ...repeatComponents(  kRG,   uint8), sRGB: false },\n  'rg8sint':                { ...repeatComponents(  kRG,   sint8), sRGB: false },\n  'r32uint':                { ...repeatComponents(   kR,  uint32), sRGB: false },\n  'r32sint':                { ...repeatComponents(   kR,  sint32), sRGB: false },\n  'r32float':               { ...repeatComponents(   kR, float32), sRGB: false },\n  'rg16uint':               { ...repeatComponents(  kRG,  uint16), sRGB: false },\n  'rg16sint':               { ...repeatComponents(  kRG,  sint16), sRGB: false },\n  'rg16float':              { ...repeatComponents(  kRG, float16), sRGB: false },\n\n  'rgba8unorm':             { ...repeatComponents(kRGBA,  unorm8), sRGB: false },\n  'rgba8unorm-srgb':        { ...repeatComponents(kRGBA,  unorm8), sRGB:  true },\n  'rgba8snorm':             { ...repeatComponents(kRGBA,  snorm8), sRGB: false },\n  'rgba8uint':              { ...repeatComponents(kRGBA,   uint8), sRGB: false },\n  'rgba8sint':              { ...repeatComponents(kRGBA,   sint8), sRGB: false },\n  'bgra8unorm':             { ...repeatComponents(kBGRA,  unorm8), sRGB: false },\n  'bgra8unorm-srgb':        { ...repeatComponents(kBGRA,  unorm8), sRGB:  true },\n  'rg32uint':               { ...repeatComponents(  kRG,  uint32), sRGB: false },\n  'rg32sint':               { ...repeatComponents(  kRG,  sint32), sRGB: false },\n  'rg32float':              { ...repeatComponents(  kRG, float32), sRGB: false },\n  'rgba16uint':             { ...repeatComponents(kRGBA,  uint16), sRGB: false },\n  'rgba16sint':             { ...repeatComponents(kRGBA,  sint16), sRGB: false },\n  'rgba16float':            { ...repeatComponents(kRGBA, float16), sRGB: false },\n  'rgba32uint':             { ...repeatComponents(kRGBA,  uint32), sRGB: false },\n  'rgba32sint':             { ...repeatComponents(kRGBA,  sint32), sRGB: false },\n  'rgba32float':            { ...repeatComponents(kRGBA, float32), sRGB: false },\n\n  'rgb10a2unorm':           { componentOrder: kRGBA, componentInfo: { R: unorm10, G: unorm10, B: unorm10, A: unorm2 }, sRGB: false },\n  'rg11b10ufloat':          { componentOrder: kRGB, componentInfo: { R: float11, G: float11, B: float10 }, sRGB: false },\n  // TODO: the e5 is shared between all components; figure out how to write it.\n  'rgb9e5ufloat':           { componentOrder: kRGB, componentInfo: { R: componentUnimplemented, G: componentUnimplemented, B: componentUnimplemented }, sRGB: false },\n\n  'depth32float':           { componentOrder: [TexelComponent.Depth], componentInfo: { Depth: float32 }, sRGB: false },\n  'depth24plus':            { componentOrder: [TexelComponent.Depth], componentInfo: { Depth: null }, sRGB: false },\n  'depth24plus-stencil8':   { componentOrder: [TexelComponent.Depth, TexelComponent.Stencil], componentInfo: { Depth: null, Stencil: null }, sRGB: false },\n};\n\nexport interface TexelDataRepresentation {\n  readonly componentOrder: TexelComponent[];\n  readonly componentInfo: TexelComponentInfo;\n\n  // Gets the data representation for |components| where |components| is the expected\n  // values when read in a shader. i.e. Passing in 1.0 for a 8-bit unorm component will\n  // yield 255.\n  getBytes(components: { [c in TexelComponent]?: number }): ArrayBuffer;\n\n  // Pack texel components into the packed byte representation. This may round values, but\n  // does not do unorm <-> float conversion.\n  packData(components: { [c in TexelComponent]?: number }): ArrayBuffer;\n\n  // Decode data into the shader representation\n  decode(components: { [c in TexelComponent]?: number }): { [c in TexelComponent]?: number };\n}\n\nclass TexelDataRepresentationImpl implements TexelDataRepresentation {\n  constructor(\n    private readonly format: UncompressedTextureFormat,\n    readonly componentOrder: TexelComponent[],\n    readonly componentInfo: TexelComponentInfo,\n    private readonly sRGB: boolean\n  ) {}\n\n  private totalBitLength(): number {\n    return this.componentOrder.reduce((acc, curr) => {\n      return acc + this.componentInfo[curr]!.bitLength;\n    }, 0);\n  }\n\n  private writeTexelData(\n    data: ArrayBuffer,\n    bitOffset: number,\n    bitLength: number,\n    type: TexelWriteType,\n    value: number\n  ) {\n    switch (type) {\n      case TexelWriteType.Float: {\n        const byteOffset = Math.floor(bitOffset / 8);\n        const byteLength = Math.ceil(bitLength / 8);\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 4:\n            new DataView(data, byteOffset, byteLength).setFloat32(0, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      }\n      case TexelWriteType.Sint: {\n        const byteOffset = Math.floor(bitOffset / 8);\n        const byteLength = Math.ceil(bitLength / 8);\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 1:\n            new DataView(data, byteOffset, byteLength).setInt8(0, value);\n            break;\n          case 2:\n            new DataView(data, byteOffset, byteLength).setInt16(0, value, true);\n            break;\n          case 4:\n            new DataView(data, byteOffset, byteLength).setInt32(0, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      }\n      case TexelWriteType.Uint: {\n        const byteOffset = Math.floor(bitOffset / 8);\n        const byteLength = Math.ceil(bitLength / 8);\n        if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n          switch (byteLength) {\n            case 1:\n              new DataView(data, byteOffset, byteLength).setUint8(0, value);\n              break;\n            case 2:\n              new DataView(data, byteOffset, byteLength).setUint16(0, value, true);\n              break;\n            case 4:\n              new DataView(data, byteOffset, byteLength).setUint32(0, value, true);\n              break;\n            default:\n              unreachable();\n          }\n        } else {\n          // Packed representations are all 32-bit and use Uint as the data type.\n          // ex.) rg10b11float, rgb10a2unorm\n          switch (this.totalBitLength()) {\n            case 32: {\n              const view = new DataView(data);\n              const currentValue = view.getUint32(0, true);\n\n              let mask = 0xffffffff;\n              const bitsToClearRight = bitOffset;\n              const bitsToClearLeft = 32 - (bitLength + bitOffset);\n\n              mask = (mask >>> bitsToClearRight) << bitsToClearRight;\n              mask = (mask << bitsToClearLeft) >>> bitsToClearLeft;\n\n              const newValue = (currentValue & ~mask) | (value << bitOffset);\n\n              view.setUint32(0, newValue, true);\n              break;\n            }\n            default:\n              unreachable();\n          }\n        }\n        break;\n      }\n      default:\n        unreachable();\n    }\n  }\n\n  private getComponentBitOffset(component: TexelComponent): number {\n    const componentIndex = this.componentOrder.indexOf(component);\n    assert(componentIndex !== -1);\n    return this.componentOrder.slice(0, componentIndex).reduce((acc, curr) => {\n      const componentInfo = this.componentInfo[curr];\n      assert(!!componentInfo);\n      return acc + componentInfo.bitLength;\n    }, 0);\n  }\n\n  private setComponent(data: ArrayBuffer, component: TexelComponent, n: number): void {\n    const bitOffset = this.getComponentBitOffset(component);\n    const componentInfo = this.componentInfo[component];\n    assert(!!componentInfo);\n    const { write, bitLength } = componentInfo;\n\n    const { value, type } = write(n);\n    this.writeTexelData(data, bitOffset, bitLength, type, value);\n  }\n\n  private setComponentBytes(data: ArrayBuffer, component: TexelComponent, value: number): void {\n    assert(this.format in kEncodableTextureFormatInfo);\n    const format = this.format as EncodableTextureFormat;\n\n    const componentInfo = this.componentInfo[component];\n    assert(!!componentInfo);\n\n    const bitOffset = this.getComponentBitOffset(component);\n    const { bitLength } = componentInfo;\n\n    switch (kEncodableTextureFormatInfo[format].dataType) {\n      case 'float':\n      case 'ufloat':\n        // Use the shader encoding which can pack floats as uint data.\n        this.setComponent(data, component, value);\n        break;\n      case 'snorm':\n      case 'sint': {\n        this.writeTexelData(data, bitOffset, bitLength, TexelWriteType.Sint, value);\n        break;\n      }\n      case 'unorm':\n      case 'uint': {\n        this.writeTexelData(data, bitOffset, bitLength, TexelWriteType.Uint, value);\n        break;\n      }\n    }\n  }\n\n  getBytes(components: PerTexelComponent<number>): ArrayBuffer {\n    if (this.sRGB) {\n      components = Object.assign({}, components);\n      assert(components.R !== undefined);\n      assert(components.G !== undefined);\n      assert(components.B !== undefined);\n      [components.R, components.G, components.B] = [\n        gammaCompress(components.R),\n        gammaCompress(components.G),\n        gammaCompress(components.B),\n      ];\n    }\n\n    const bytesPerBlock = kUncompressedTextureFormatInfo[this.format].bytesPerBlock;\n    assert(!!bytesPerBlock);\n\n    if (this.format === 'rgb9e5ufloat') {\n      assert(this.componentOrder.length === 3);\n      assert(this.componentOrder[0] === TexelComponent.R);\n      assert(this.componentOrder[1] === TexelComponent.G);\n      assert(this.componentOrder[2] === TexelComponent.B);\n      assert(bytesPerBlock === 4);\n      assert(components.R !== undefined);\n      assert(components.G !== undefined);\n      assert(components.B !== undefined);\n\n      const buf = new ArrayBuffer(bytesPerBlock);\n      new DataView(buf).setUint32(\n        0,\n        encodeRGB9E5UFloat(components.R, components.G, components.B),\n        true\n      );\n      return buf;\n    }\n\n    const data = new ArrayBuffer(bytesPerBlock);\n    for (const c of this.componentOrder) {\n      const componentValue = components[c];\n      assert(componentValue !== undefined);\n      this.setComponent(data, c, componentValue);\n    }\n    return data;\n  }\n\n  packData(components: PerTexelComponent<number>): ArrayBuffer {\n    const bytesPerBlock = kUncompressedTextureFormatInfo[this.format].bytesPerBlock;\n    assert(!!bytesPerBlock);\n\n    if (this.format === 'rgb9e5ufloat') {\n      assert(this.componentOrder.length === 3);\n      assert(this.componentOrder[0] === TexelComponent.R);\n      assert(this.componentOrder[1] === TexelComponent.G);\n      assert(this.componentOrder[2] === TexelComponent.B);\n      assert(bytesPerBlock === 4);\n      assert(components.R !== undefined);\n      assert(components.G !== undefined);\n      assert(components.B !== undefined);\n\n      const buf = new ArrayBuffer(bytesPerBlock);\n      new DataView(buf).setUint32(\n        0,\n        encodeRGB9E5UFloat(components.R, components.G, components.B),\n        true\n      );\n      return buf;\n    }\n\n    const data = new ArrayBuffer(bytesPerBlock);\n    for (const c of this.componentOrder) {\n      const componentValue = components[c];\n      assert(componentValue !== undefined);\n      this.setComponentBytes(data, c, componentValue);\n    }\n    return data;\n  }\n\n  decode(components: PerTexelComponent<number>): PerTexelComponent<number> {\n    const values: PerTexelComponent<number> = {};\n    for (const c of this.componentOrder) {\n      const componentValue = components[c];\n      const info = this.componentInfo[c];\n      assert(componentValue !== undefined);\n      assert(!!info);\n      values[c] = info.decode(componentValue);\n    }\n    if (this.sRGB) {\n      assert('R' in values && values.R !== undefined);\n      assert('G' in values && values.G !== undefined);\n      assert('B' in values && values.B !== undefined);\n      [values.R, values.G, values.B] = [\n        gammaDecompress(values.R),\n        gammaDecompress(values.G),\n        gammaDecompress(values.B),\n      ];\n    }\n    return values;\n  }\n}\n\nconst kRepresentationCache: Map<UncompressedTextureFormat, TexelDataRepresentationImpl> = new Map();\nexport function getTexelDataRepresentation(\n  format: UncompressedTextureFormat\n): TexelDataRepresentation {\n  if (!kRepresentationCache.has(format)) {\n    const { componentOrder, componentInfo, sRGB } = kRepresentationInfo[format];\n    kRepresentationCache.set(\n      format,\n      new TexelDataRepresentationImpl(format, componentOrder, componentInfo, sRGB)\n    );\n  }\n  return kRepresentationCache.get(format)!;\n}\n"],"file":"texelData.js"}